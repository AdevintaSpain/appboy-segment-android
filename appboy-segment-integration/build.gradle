buildscript {
  repositories {
    jcenter()
    mavenCentral()
    google()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.3.2'
  }
}

apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

android {
  compileSdkVersion 29
  buildToolsVersion '29.0.0'

  defaultConfig {
    // Segment.io supports down to api 14:  https://segment.com/docs/libraries/android/
    // The Braze SDK supports down to api 16
    minSdkVersion 16
    targetSdkVersion 29

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
      includeAndroidResources = true
    }
  }
}

checkstyle {
  configFile rootProject.file('gradle/checkstyle.xml')
}

dependencies {
  repositories {
    jcenter()
    mavenCentral()
    maven { url "http://appboy.github.io/appboy-android-sdk/sdk" }
    google()
  }

  compileOnly 'com.segment.analytics.android:analytics:4.3.1'

  api 'com.appboy:android-sdk-ui:6.0.0'

  testImplementation 'junit:junit:4.12'
  testImplementation('org.robolectric:robolectric:3.0') {
    exclude group: 'commons-logging', module: 'commons-logging'
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
  }

  testImplementation 'com.segment.analytics.android:analytics-tests:4.3.1'
  androidTestImplementation 'com.segment.analytics.android:analytics-tests:4.3.1'

  testImplementation 'org.assertj:assertj-core:1.7.1'
  testImplementation 'org.mockito:mockito-core:1.10.19'
  testImplementation 'org.powermock:powermock:1.6.2'
  testImplementation 'org.powermock:powermock-module-junit4:1.6.2'
  testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.2'
  testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
  testImplementation 'org.powermock:powermock-classloading-xstream:1.6.2'

  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test:rules:1.0.2'
  androidTestImplementation 'junit:junit:4.12'
}

// Grabs the first line of the changelog to get the current version. Expects the line to start with Markdown syntax
// (ex: ## major.minor.build)
new File("../public/CHANGELOG.md").withReader { version = it.readLine().substring(3) }
logger.lifecycle("Setting version to last recorded version in CHANGELOG.md: " + version)

publishing {
  publications {
    maven(MavenPublication) {
      groupId = 'com.appboy'
      artifactId 'appboy-segment-integration'
      artifact("build/outputs/aar/appboy-segment-integration-release.aar")
      artifact sourcesJar
      artifact javadocJar

      pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        // Iterate over the api dependencies (i.e. the braze lib),
        // adding a <dependency> node for each
        configurations.api.allDependencies.each {
          def dependencyNode = dependenciesNode.appendNode('dependency')
          dependencyNode.appendNode('groupId', it.group)
          dependencyNode.appendNode('artifactId', it.name)
          dependencyNode.appendNode('version', it.version)
          dependencyNode.appendNode('scope', 'compile')
        }
      }

      pom {
        name = 'Appboy Integration'
        description = 'Appboy Integration for Segment Android Analytics'
        url = 'http://github.com/appboy/appboy-segment-android'

        licenses {
          license {
            name = 'The MIT License (MIT)'
            url = 'http://opensource.org/licenses/MIT'
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = 'appboy'
            name = 'Appboy, Inc.'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/appboy/appboy-segment-android.git'
          developerConnection = 'scm:git:ssh://git@github.com/appboy/appboy-segment-android.git'
          url = 'http://github.com/appboy/appboy-segment-android'
        }
      }
    }
  }
  repositories {
    maven {
      credentials {
        username project.hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
        password project.hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
      }
      if(version.endsWith('SNAPSHOT')) {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
      } else {
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: ":assemble") {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
  destinationDir = file("build/outputs/sources/")

  archiveName = "${project.getName()}-sources.jar"
}

task javadocJar(type: Jar, dependsOn: ":javadocRelease") {
  classifier = 'javadoc'
  // The "from" here means to take the HTML javadoc from some directory and convert it into a JAR
  from file("build/outputs/javadoc/")
  destinationDir = file("build/outputs/javadocJar/")
}

task javadocRelease(type: Javadoc) {
  source(android.sourceSets.main.java.srcDirs)
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  failOnError false
  destinationDir = file("build/outputs/javadoc/")
}

if (project.hasProperty("signing.keyId") && enableSigning.toBoolean()) {
  apply plugin: 'signing'
  signing {
    sign configurations.archives
    sign publishing.publications
  }
}
